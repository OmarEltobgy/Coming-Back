Trie:
-----

#define alphabetSize 26

// We also cann make a pool of node pointers (big array) and in the node class we use an integer (index) to this array 
// instead of using node pointers

// Also if the alphabet size is large we can store the children as a linked list (left most child and next) for each node 
// if we do this we will need character represiting nowChar

class Node
{
public:
    int wordsN, prefixN;
    //bool endWord;
    Node* children[alphabetSize]; // size of the alphabet

    Node()
    {
        wordsN = 0;
        prefixN = 0;
        for(int i=0; i<alphabetSize; i++)
        {
            children[i] = NULL;
        }
    }
};

void insertWord(string word, Node* nowNode) // returns true if this word is newWord
{
    for(int i=0; i<(int)word.size(); i++)
    {
        nowNode->prefixN++;

        char nowChar = word[i];
        int nowCharIndex = nowChar - 'A'; // also we can use a map for the alphabet used characters
        Node* nextCharNode = nowNode->children[nowCharIndex];

        if(nextCharNode != NULL)
        {
            nowNode = nextCharNode;
        }
        else
        {
            nextCharNode = new Node();
            nowNode->children[nowCharIndex] = nextCharNode;

            nowNode = nextCharNode;
        }
    }

    nowNode->wordsN++;
    //nowNode->endWord = true;
}

// We can also count the prefixes by returning prefixN instead of wordsN
int findWord(string word, Node* nowNode)
{
    for(int i=0; i<(int)word.size(); i++)
    {
        char nowChar = word[i];
        int nowCharIndex = nowChar - 'A'; // also we can use a map for the alphabet used characters
        Node* nextCharNode = nowNode->children[nowCharIndex];

        if(nextCharNode != NULL)
        {
            nowNode = nextCharNode;
        }
        else
        {
            return 0;
        }
    }

    return nowNode->wordsN;
    //return nowNode->endWord;
}

void removeWord(string word, Node* nowNode)
{
    for(int i=0; i<(int)word.size(); i++)
    {
        nowNode->prefixN--;

        char nowChar = word[i];
        int nowCharIndex = nowChar - 'A'; // also we can use a map for the alphabet used characters
        Node* nextCharNode = nowNode->children[nowCharIndex];

        if(nextCharNode != NULL)
        {
            nowNode = nextCharNode;
        }
        else
        {
            return;
        }
    }

    nowNode->wordsN--;
}

int main()
{
    Node* root = new Node();

    insertWord("ABC", root);
    insertWord("ABC", root);

    cout << findWord("AB", root) << endl;
    cout << findWord("ABC", root) << endl;

    return 0;
}
