#include <iostream>
#include <stdio.h>
#include <map>
#include <vector>
#include <queue>
using namespace std;

typedef pair<int, int> ii;
typedef pair<pair<int, int>, int> iii;
int grid[10000][10000];
bool visited[10000][10000];
int dx[] = {-1, 1,  0, 0};
int dy[] = {0,  0, -1, 1};
int M;
vector<ii> startPositions;

int shortestBFS(int xStart, int yStart)
{
    queue<iii> q;
    visited[xStart][yStart] = true;
    q.push(iii(ii(xStart, yStart), 0));
    while(q.size() != 0)
    {
        iii f = q.front();
        int x = f.first.first;
        int y = f.first.second;
        int w = f.second;
        q.pop();
        if(grid[x][y] == 3) // Reached grid of color 3
        {
            return w;
        }
        for(int i=0; i<4; i++)
        {
            if(x+dx[i] >= 0 && x+dx[i] < M && y+dy[i] >= 0 && y+dy[i] < M) // Valid Coordinates
            {
                if(visited[x+dx[i]][y+dy[i]] == false)
                {
                    visited[x+dx[i]][y+dy[i]] = true;
                    q.push(iii(ii(x+dx[i], y+dy[i]), w+1));
                }
            }
        }
    }
    return -1;
}

int main()
{
    string line;
    int maxi;
    while(scanf("%d",&M) != EOF)
    {
        startPositions.clear();

        for(int i=0; i<M; i++)
        {
            cin >> line;
            for(int j=0; j<M; j++)
            {
                grid[i][j] = (line[j]-'0');
                visited[i][j] = false;
                if(grid[i][j] == 1)
                {
                    startPositions.push_back(ii(i, j));
                }
            }
        }

        maxi = shortestBFS(startPositions[0].first, startPositions[0].second);
        for(int i=1; i<startPositions.size(); i++)
        {
            for(int i=0; i<M; i++)
            {
                for(int j=0; j<M; j++)
                {
                    visited[i][j] = false;
                }
            }
            int ret = shortestBFS(startPositions[i].first, startPositions[i].second);
            if(ret > maxi)
            {
                maxi = ret;
            }
        }
        cout << maxi << endl;
    }


    return 0;
}
