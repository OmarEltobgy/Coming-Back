1) Pair:
- pair<int, pair<string, double> > x;
- pair.first and pair.second

2) Vector:
- resize(): changes the size also you can specify the size in the constructor
- vector[x] or vector.at(x):: to read or write in a specific index
- vector.push_back(x)
- void vector.pop_back()
- x = vector.front() or x = vector.back()

3) Queue:
- queue.push(x)
- void queue.pop()
- x = queue.front() or x = queue.back

4) Priority Queue:
- same as queue except the constructor (push / pop)
- pq.top()
- priority_queue<int, vector<int>, greater<int> > pq  // the smallest one is at the top
                                                      // #include <functional> for greater<int> or less<int>
- priority_queue<int> pq  // less is the default ( the greatest one is at the top )

5) Map:
- map<key, value> map
- value = map[key] (map.at(key) // returns default value if there is no such key (0 for int, "" for string)
- map[key] = value // also you can use map.at(key)
- int = map.count(key) // 0 if there is no such key
- To get all the entries of the map sorted
  for (map<char,int>::iterator it=mymap.begin(); it!=mymap.end(); ++it)
  {
    cout << it->first << " => " << it->second << '\n';
    // Do whatever you want with it->first (key) and it->second (value) and you can store it->first in a variable of the 
    // same data type and the same with it->second
  }

6) List (Linked List): List<int> myList;
- myList.remove(int value);
- for (list<int>::iterator it=mylist.begin(); it!=mylist.end(); ++it)
    std::cout << ' ' << *it;


6) General: 
- for(it=x.begin; it<x.end; it++) int i = (int)it;
  begin() -> returns an iterator to the beginning
  end() -> returns an interator to the end
- clear()
- size(): actual size

7) Strings vs Character Array:
- str.c_str(): to change a string to a character array
- str.size() or str.length()
- gets(char Array): reads a character array till \n 
- getLine(cin, str): reads a string till \n
** Note that if there is a line before getline() it will read an empty line representaing the remaining of this line
   so you should place 2 getLine() statements to avoid this case or you can use cin.ignore() which reads th remaining '\n'
- cin >> str: reads a string til space ' '

** Changing to upper/lower case:
- string temp;
  transform(temp.begin(), temp.end(), temp.begin(), ::tolower);
  
** finding a string in another string
int pos = str.find(toFind) -> finds the first index of the first occurence of (toFind) in str and if it doesn't find it, it return string::npos (-1)
int pos = str.find(toFind, indexToStart) -> starts searching from indexToStart (0 based)

** replace a portion of a string with another string
str.replace(indexToStart, lengthToChange, otherString)
// Using positions:            0123456789*123456789*12345
string str=base;           // "this is a test string."
str.replace(9,5,str2);     // "this is an example string."

** substring:
newStr = str.substr(int startPos); -> gets substring from startPos to the end
newStr = str.substr(int startPos, int length)

8) Sorting:
- sort(myvector.begin(), myvector.end(), myCompFunction) 
  bool myCompFunction(int first, int second)
- sort( array, array + sizeof(array)/sizeof(array[0]) ); // or arra + size
  Note that the sizeof() function returns the answer in bytes
  and we want to add the size of the array (Number of integer entries for example)

9) bool next_permutation(x, y) same parameters as sort(x, y) returns false when there are no more permutations
  vector<int> arr;
  sort (arr.begin(), arr.end()); // First of all sort the vector or the array [first permutation sorted]
  do 
  {
    // Do whatever you want with this permutation
  } while ( next_permutation(arr.begin(), arr.end()); //returns false when there are no more permutations
  
  
10) lower_bound and upper_bound: make binary search on the array or vector 
   lower bound returns the first value which is equal greater than or equal (not less than) than the needed value
   returns an iterator to the last element if all the entries are less than the value needed
   binary_search method returns true if this value is found in the vector
   
  sort (v.begin(), v.end());                //First of all sort the vector to use binary search
  vector<int>::iterator low,up;             //Make itertor of type vector<int>
  low=std::lower_bound (v.begin(), v.end(), 20); 
  up= std::upper_bound (v.begin(), v.end(), 20);
  


11) when using pow() function there is always round off error so use round(pow()) instead


12) Conversion from integer to string and viceversa:
#include <stdlib.h>
int i = atoi (charArr[]);
int i = atoi (str.c_str());

char charArray[] =  itoa ( int value, charArray[], int base );

13) Needed Libraries:
#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <functional>
#include <stack>
#include <math.h>
#include <iterator>
#include <algorithm>

using namespace std;

typedef pair<int, int> ii;
typedef pair<int, ii> iii;

int main()
{
    //freopen ("myfile.txt","w",stdout);
    
    return 0;
}

11) Reading from file:
freopen ("myfile.txt","w",stdout);
fclose (stdout);
