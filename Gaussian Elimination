vector<vector<double> > augMat; // the last column is the resulting matrix
vector<double> result;
long long inDependentN = 0;

bool swapPivot(int startRow, int columnIncrement)
{
    double temp;
    for(int i=startRow+1; i<rowN; i++)
    {
        if(augMat[i][startRow+columnIncrement] != 0)
        {
            for(int j=startRow+columnIncrement; j<colN; j++)
            {
                temp = augMat[startRow][j];
                augMat[startRow][j] = augMat[i][j];
                augMat[i][j] = temp;
            }
            return true;
        }
    }
    return false;
}

void gauss_Elimination()
{
    inDependentN = 0;
    int columnIncrement = 0; // this is also the number of dependent equations

    // Forward Substitution
    for(int i=0; i<rowN; i++)
    {
        if(i+columnIncrement >= colN-1) // we don't need last column (colN-1) because we don't need the augmented matrix column
        {
            break; // the end no more independent equations to explore
        }

        if(augMat[i][i+columnIncrement] == 0)
        {
            if(swapPivot(i, columnIncrement) == false)
            {
                columnIncrement ++; // increase column increment
                i--;                // decrease row because in the for loop we increase it again to remain in the same row only change the column
                continue;
            }
        }

        inDependentN++;

        for(int j=i+1; j<rowN; j++)
        {
            int pivot = augMat[j][i+columnIncrement] / augMat[i][i+columnIncrement]; // we don't need to make modular multiplicative inverse as augMat[i][i] must = 1
                // Also we can use here the inverse modular arithmetic for the denominator if we want answer % a number
            for(int k=i+columnIncrement; k<colN; k++)
            {
                augMat[j][k] = (augMat[j][k] - (pivot*augMat[i][k])%2) % 2;
            }
        }
    }

    // Backward Substitution
    for(int i=rowN-1; i>=0; i--)
    {
        result[i] = augMat[i][rowN]; // rowN column is the resulting matrix column

        for(int j=colN-2; j>i; j--) // colN-1 is the number of columns without last column
        {
            result[i] -= result[j]*augMat[i][j];
        }

        result[i] /= augMat[i][i];
    }
}

// Initialization of augMat and result
result.clear();
augMat.clear();

augMat.resize(rowN);
result.resize(rowN);

for(i=0; i<rowN; i++)
{
    augMat[i].resize(colN);

    for(int j=0; j<colN-1; j++) // loops to set all the matrix except the last column of the resulting matrix
    {
        // Set augMat[i][j]
    }

    // Set augMat[i][colN-1] = 0; //which is the column of the resulting matrix
}

// then sets any initial and final states if they exist and have other values



