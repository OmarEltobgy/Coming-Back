#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>
#include <string>
#include <string.h>
#include <stdlib.h>
#include <map>
#include <functional>
#include <stack>
#include <math.h>
#include <iterator>

using namespace std;

int nodesN, startNode, endNode, edgesN;
vector<vector<int> > adjList; // contains a list of neighbors to certain node
                              //[weights are stored in adjMat] as we change a lot in these weights
int adjMat[200][200];         // the residual weights of edges [we add an subtract and compare to these weights] (capacity-flow)
int origianlAdjMat[200][200]; // the original edges no editing is done to this (original capacity(
bool visited[200];            // needed for BFS
int parent[200];              // needed for BFS
int INF = 1000000000;


void bfs() // we know the startNode and endNode [global variables]
{
    queue<int> q;

    visited[startNode] = true;
    // parent[s] = -1 :D
    q.push(startNode);

    while(q.empty() == false)
    {
        int nowNode = q.front();
        q.pop();

        if(nowNode == endNode)
        {
            return; // Augmenting path found :D :D
        }

        for(int i=0; i<(int)adjList[nowNode].size(); i++)
        {
            int nextNode = adjList[nowNode][i];
            if(adjMat[nowNode][nextNode] > 0 && visited[nextNode] == false) // There must be remaining capacity for the flow
            {
                visited[nextNode] = true;
                parent[nextNode] = nowNode;
                q.push(nextNode);
            }
        }
    }

    // No augmenting path found :(
    // whether we found an augmenting path or not will appear when we want to calculate the flow that this path can handle
}

int augmentPath(int nowNode, int minEdgeTillNow)
{
    if(nowNode == startNode)  // sure parent[nowNode] = -1
    {
        return minEdgeTillNow;
    }

    if(parent[nowNode] != -1)
    {
        int edgeWeight = adjMat[parent[nowNode]][nowNode];
        int minEdge = augmentPath(parent[nowNode], min(minEdgeTillNow, edgeWeight));
        
        if(minEdge != INF)
        {
          adjMat[parent[nowNode]][nowNode] -= minEdge;
          adjMat[nowNode][parent[nowNode]] += minEdge;
        }
        
        return minEdge;
    }
    else // No parent for this node [The Path can't reach the source)
    {
        return INF;
    }
}

long long solveMaxFlow()
{
    long long maxFlow = 0;

    while(true)
    {
        for(int i=1; i<=nodesN; i++)
        {
            visited[i] = false;
            parent[i]  = -1;   // any sentinel value
        }

        bfs(); // we know the startNode and endNode [global variables]

        int minEdge = augmentPath(endNode, INF);

        if(minEdge == INF) // No Further Augmenting path found
        {
            return maxFlow;
        }
        else
        {
            maxFlow += minEdge;
        }
    }
}

int main()
{
    cin >> nodesN;

    adjList.clear();
    adjList.resize(nodesN+1);
    for(int i=1; i<=nodesN; i++)
    {
        for(int j=1; j<=nodesN; j++)
        {
            adjMat[i][j] = 0; //Initial Value of all edges is 0 as this indicates that no flow can occur
            origianlAdjMat[i][j] = 0;
        }
    }
    
    cin >> startNode >> endNode >> edgesN;

    int first, second, weight;
    for(int i=0; i<edgesN; i++)
    {
        cin >> first >> second >> weight;
        
        if(adjMat[first][second] == 0)
        {
            adjList[first].push_back(second);
            
            //Note that regardless whether the graph is directed or not we add the reverse edge in the adjList even if it has 0 weight
            //because when we augment the path it will have weight other than 0 and we may want to use the reverse edge
            //so we add the reverse edge in the adjList
            adjList[second].push_back(first);
        }
        adjMat[first][second] += weight;  // We add the weights to handle if there are multiple edges between same nodes
        origianlAdjMat[first][second] += weight;

        //If the edges are undirected we also add the weight to the reverse edge
        adjMat[second][first] += weight;  // We add the weights to handle if there are multiple edges between same nodes
        origianlAdjMat[second][first] += weight;
    }

    long long maxFlow = solveMaxFlow();
    
    // To get the minimum cut to disconnect the startNode and endNode into 2 disconnected components
    // minimum cut = maximum flow
    // edges needed to be cut are the edges from visited nodes to non non visited node after the last BFS
    vector<ii> minCutEdges;
    for(i=1; i<=nodesN; i++)
	{
		if(visited[i] == true)
		{
			for(j=0; j<adjList[i].size(); j++)
			{
				next = adjList[i][j];
				if(visited[next] == false)
				{
				    minCutEdges.push_back(ii(i, j));
				}
			}
		}
	}

    return 0;
}


**Other Features: 
1) Multi Sources and Multi Sinks [Super Source and Super Sink]
2) Vertices with weights [InNode, OutNode]
3) Minimum Cut
4) Maximum Independent Paths [capacity of each edge is 1 and capacity of each vertex is 1] 
5) Maximum Edge Disjoint Paths [capacity of each edge is 1 ONLY]
6) Min Cost Max Flow [Dijkestra on Cost instead of BFS)
7) Getting edges of a graph given in and out degrees [TopCoder]
 First, notice that we can perform this simple test at the beginning. We can compute the number M of edges by summing the out-degrees
 or the in-degrees of the vertices. If these numbers are not equal, clearly there is no graph that could be built. This doesn't solv
 e our problem, though. There are some greedy approaches that come to mind, but none of them work. We will combine the tricks
 discussed above to give a max-flow algorithm that solves this problem. First, build a network that has 2 (in/out) vertices 
 for each initial vertex. Now draw an edge from every out vertex to every in vertex. Next, add a super-source and draw an edge 
 from it to every out-vertex. Add a super-sink and draw an edge from every in vertex to it. We now need some capacities for this
 to be a flow network. It should be pretty obvious what the intent with this approach is, so we will assign the following capacities:
 for each edge drawn from the super-source we assign a capacity equal to the out-degree of the vertex it points to. As there may 
 be only one arc from a vertex to another, we assign a 1 capacity to each of the edges that go from the outs to the ins. 
 As you can guess, the capacities of the edges that enter the super-sink will be equal to the in-degrees of the vertices.
 If the maximum flow in this network equals M or (the number of edges), we have a solution, and for each edge between the out 
 and in vertices that has a flow along it (which is maximum 1, as the capacity is 1) we can draw an edge between corresponding 
 vertices in our graph. Note that both x-y and y-x edges may appear in the solution. This is very similar to the maximum matching 
 in a bipartite graph that we will discuss later. An example is given below where the out-degrees are (2, 1, 1, 1) 
 and the in-degrees (1, 2, 1, 1). 

