// All the calls will be nowNode = 1 and (left, right) is either (0, N-1) -0 based- or (1, N) -1 based-
// don't forget to memset tree and lazy with initial value (0) in the begining 

int arr[N];    // the array of values you want to work on
int tree[4*N]; // the array representing segment tree [Its Maximum is 4*size of initial array]
int lazy[4*N]; // lazy propagation

void build_SegmentTree(int nowNode, int left, int right)
{
    if(left == right)
    {
        tree[nowNode] = arr[left];  //Sometimes we need the index not the value (tree[nowNode] = left);
        return;                     //Don't Forget Return :D
    }

    int mid = (left + right) / 2;
    build_SegmentTree(nowNode*2  , left , mid); // Left Child
    build_SegmentTree(nowNode*2+1, mid+1, right); // Right Child

    // We make any computations we need between tree[nowNode*2] and tree[nowNode*2+1] whose values are set in the 2 previous calls
    // to store the result we need [minimum, maximum, sum, ......] in tree[nowNode]
    
    tree[nowNode] = tree[nowNode*2] + tree[nowNode*2+1];
    or
    tree[nowNode] = max(tree[nowNode*2], tree[nowNode*2+1]);
}

int query(int nowNode, int left, int right, int leftRange, int rightRange)
{
    pushDownLazy(nowIndex, left, right); // each index we visit we will update the lazy

    if(left > rightRange || right < leftRange) // The range is outside the range we want to search in
    {
        return -1; // Any Sentinel Value [if we compute sum we can return 0]
                                         [if we compute minimum we can return INF]
                                         [if we compute maximum we can return -INF]
                                         in order not to affect the computations with the other node
    }

    if(left >= leftRange && right <= rightRange) // The range is completely inside the range we want to search in
    {
        return tree[nowNode];
    }

    int mid = (left+right)/2;
    int leftReturn  = query(nowNode*2  , left , mid  , leftRange, rightRange); // Left Child
    int rightReturn = query(nowNode*2+1, mid+1, right, leftRange, rightRange); // Right Child
    
    // Note that this doesn't affect at all tree[nowNode] and we use the returned value not tree[nowNode*2] and tree[nowNode*2+1]
    // We may not use the comparison with the sentinel value if the sentinel value will not affect the computation 
    
    if(leftReturn == -1 && rightReturn == -1) return -1; // we will never encounter this case
    else if (leftReturn == -1) return rightReturn;
    else if (rightReturn == -1) return leftReturn;
    else // return the computation you need between 2 completely intervals inside your interval
    {
        return leftReturn + rightReturn;
        or
        return max(leftReturn, rightReturn);
        
        // Note that this is the same computation that we made in the building 
        // but between the returned values (leftReturn, rightReturn) not  (tree[nowNode*2] and tree[nowNode*2+1])
        // also we return the value here in contrast with the build an update there is no value return as it is stored in tree[nowNode]
    }
}

void update(int nowNode, int left, int right, int index, int newValue)
{
    pushDownLazy(nowIndex, left, right); // each index we visit we will update the lazy

    if(left > index || right < index) // a range not containing index so there isn't any modifications so we will return
    {
        return; //Don't Forget Return :D
    }

    if(left == index && right == index) // this is the range of [index, index] so we will modify tree[nowNode] and return
    {
        tree[nowNode] = newValue;
        return; //Don't Forget Return :D
    }
    
    int mid = (left+right)/2;
    update(nowNode*2  , left , mid  , index); // Left Child
    update(nowNode*2+1, mid+1, right, index); // Right Child
    
    // We make any computations we need between tree[nowNode*2] and tree[nowNode*2+1] whose values are updated in the 2 previous calls
    // to update the result we need [minimum, maximum, sum, ......] in tree[nowNode]
    
    tree[nowNode] = tree[nowNode*2] + tree[nowNode*2+1];
    or
    tree[nowNode] = max(tree[nowNode*2], tree[nowNode*2+1]);
    
    // Note that this is the same computation that we made in the building
    // Don't forget these updates
}


void updateRange(int nowIndex, int left, int right, int leftRange, int rightRange, int valToAdd)
{
    pushDownLazy(nowIndex, left, right); // each index we visit we will update the lazy

    if(left > rightRange || right < leftRange) // a range not containing index so there isn't any modifications so we will return
    {
        return; //Don't Forget Return :D
    }

    if(left >= leftRange && right <= rightRange)  // The range is completely inside the range we want to search in
    {
        // so we add the valToAd to the all the range and then push this value down to my children 
        
        lazy[nowIndex] += valToAdd;

        pushDownLazy(nowIndex, left, right);

        return;
    }

    int mid = (left+right)/2;

    updateRange(nowIndex*2, left, mid, leftRange, rightRange, valToAdd);
    updateRange(nowIndex*2+1, mid+1, right, leftRange, rightRange, valToAdd);

    // This is a very important update
    tree[nowIndex] = tree[nowIndex*2] + tree[nowIndex*2+1];
}



