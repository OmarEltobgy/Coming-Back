** Binary Search: 

  int low, high, mid; // low is the beginning of the values and high is the end of them
  int arr[]; // Sorted Array or vector
  while(high >= low)
  {
    mid = (high+low)/2;
    if(arr[mid] < val)
    {
      high = mid - 1;
    }
    else if(arr[mid] > val)
    {
      low = mid + 1;
    }
    else //if(arr[mid] == val)
    {
      return mid;
    }
  }
  return NOTFOUND;
  
** Binary Search is used in:
1) finding an element in a sorted list
2) Bisection Method to find the roots of the equation
    we take to values a and b in whxh f(a) and f(b) have opposite signs 
    then get the mid and get f(mid) and change a or b to mid to keep the property that f(a) and f(b) have opposite signs 
    until you reach that f(mid) nearly equal 0 or a and b are very close to each other
3) Binary Search the answer:
    We use this technique when we have a range of values where there is a specific value at which the state change
    before it the state (true or false) os different from after it
    for example all the values below X gives negative values but after X all the values are positive
    
** Greedy Algorithm:

1) Load Balancing:

2) Internal Covering:













