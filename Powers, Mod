**Modular Arithmetic:
- a = floor(a/b)*b + a%b
- (a +-* b) % m = (a%m +-* b%m) % m;
- If you want to compute large number mod m then while computing this large number take mod using previous rule to avoid
  overflow
- If you have addition and subtraction for integers do the subtraction first then the ddition to avoid the overflow
  also do the same with * and / but note that the division may result in a double value
  (x - y) + z not (x + z) - y           (x / y) * z not (x * z) / y
- For the division, we use the modular multiplicative inverse
- Modular Additive inverse:     can be computed b = m - a
  (a + b) % m = 0               a and b are positive integers
- Modular Multiplicative Inverse:      its computation is discussed below
  (a * b) % m = 1               a and b are positive integers


** Computing very large number % m: we read the number as a string str
  int result = 0;
  for(int i=0; i<str.length(); i++)
  {
    nowN = str[i] - '0';
    result = (result + nowN) % 11; //result and nowN are less than 11
    result = (result * 10) % 11; //result and 10 are less than 11
  }

**Effective Square Exponentiation:
1)int power(int base, int exp)
  {
    if(exp == 0) return 1; /*********** VIP *************/
    
    int result = power(base, exp/2);
    result = result * result;                      // We take %m here for modular exponentiation
    
    if(exp % 2 == 1) result = result * base;       // We take %m here for modular exponentiation
    
    return result;
  }
  
2)int modular_pow(int base, int exp, int m)
  {
    Assert :: (m - 1) * (base mod m) does not overflow base
    int result = 1;
    int base = base % m;
    while(exp > 0)
    {
      if (exp % 2 == 1)
      {
         result = (result * base) % m;
      }
      exp = exp >> 1;
      base = (base * base) % m;
    }
    return result
  }

- We can use Matrix Effective square exponentiation to do many tasks in O(n^3log(p)) instead of O(p) as:
1) Computing a certain fibonnacci number fib(n) 
   [ 1 1 ] ^ p   [ fib(p+1) fib(p)   ]
   [ 1 0 ]     = [ fib(p)   fib(p-1) ]
   Note that we can compute all fibonnacci numbers from 1 to n in an O(n) DP Algorithm which is better of course

2) Computing number of paths of length L of a graph stored in an Adjacency Matrix
   result = AdjMat^L -> Number of Paths of length L from vertex i to j equals result[i][j]
   

**Extended Ecluidean Algorithm (to find multiplicative modular inverse or find certain values x,y to ax+by=z)
  //x, y and d are global variables
  void extEcluid(int a, int b) // ax + by = d = gcd(a,b) - we want to get x, y, d
  {
    if(b == 0)
    {
      x = 1;
      y = 0;
      d = a;
      return;
    }
    extEcluid(b, a%b);
    int x1 = y;
    int y1 = x - (a/b)*y;
    x = x1;
    y = y1;
  }
- Now we have ax+by=d we can multiply the left and right hand side with any value to get the required value (z)
- There are infinite number of solutions for x and y (by changing n)
  x = x + (b/d)*n              y = y - (a/d)*n
- by these 2 rules we can solve this equation ax + by = z given a,b and the required is x,y
  
**Solving (a0x0 + a1x1 +…+ anxn ≡c (mod m)) for positive a's
  plll extEcluid(ll a, ll b)
  {
      ll gcd, x, y, _x, _y;
  
      if(b == 0)
      {
          gcd = a;
          x = 1;
          y = 0;
  
          return plll(gcd, pll(x, y));
      }
      plll ret = extEcluid(b, a%b);
  
      gcd = ret.first;
      _x = ret.second.first;
      _y = ret.second.second;
  
      x = _y;
      y = _x - (a/b) * _y;
  
      return plll(gcd, pll(x, y));
  }
  
  ll solve(ll firstTermValue, int secondTermIndex)
  {
      ll gcd, x, y, times;
      ll a, b, toMul;
      plll returned;
  
      if(secondTermIndex == N)
      {
          a = firstTermValue;
          b = M;
  
          returned = extEcluid(a, b);
  
          gcd = returned.first;
          x = returned.second.first;
          y = returned.second.second;
  
          if(B % gcd != 0)
          {
              yes = false;
  
              return -1; // any value
          }
          else
          {
              times = B / gcd;
              x = x * times;
              y = y * times;
  
              return (x % M + M) % M;
          }
      }
  
      a = firstTermValue;
      b = numbers[secondTermIndex];
      returned = extEcluid(a, b);
  
      gcd = returned.first;
      x = returned.second.first;
      y = returned.second.second;
  
      toMul = solve(gcd, secondTermIndex+1);
  
      y = y * toMul;
      x = x * toMul;
  
      result[secondTermIndex] = (y % M + M) % M;
  
      return (x % M + M) % M;
  }




**Fermat's Theorem:
  if p is a prime number and a is relativley prime to p then (a^(p-1)) % p = 1
  if p is a prime number and a positive integer then (a^(p)) % p = a

**Euler's Theorem:
  for any a, b relativley prime to each other then (a^(phi(b))) % b = 1       //phi(p) = p-1 same as fermat
  for any a, b (a^(phi(b)+1)) % b = a      //phi(p) = p-1 same as fermat

**Modular Multiplicative Inverse:
- (a * a^-1) % m = 1        a and m must be relativley prime
1) extEcluid(a, m): d must equal 1 and the a^-1 corresponds to x
2) Euler's Theorem: (a^(phi(m)-1)) % m = a^-1 % m
   if m is prime p we can use Fermat's Theorem instead: (a^(p-2)) % p = a^-1 % m

**Chineese Remainder Theorem (CRT):




